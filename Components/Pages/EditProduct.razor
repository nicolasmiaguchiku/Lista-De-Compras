@page "/EditProduct/{Id:int}"
@inject IListaInterface ListaServices
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Editar Produto</PageTitle>

@if(product == null)
{
    <p>Carregando...</p>
}
else
{
    <div style="max-width: 600px; margin: 0 auto;padding: 20px;border: 1px solid #ddd; border-radius: 5px;">
        <h3 style="text-align: center;">Editar Produto</h3>
        <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="productName" class="form form-table">Produto:</label>
                <InputText class="form form-control" id="productName" @bind-Value="@product.Name" />
                <ValidationMessage For="@(() => product.Name)" />
            </div>

            <div class="mb-3">
                <label for="price">Preço</label>
                <InputNumber id="price" class="form form-control" @bind-Value="product.Price" />
            </div>

            <div class="mb-3">
                <label for="category">Categoria</label>
                <select id="category" class="form form-select" @bind="product.Category">
                    @foreach (var category in Enum.GetValues(typeof(ProductCategory)))
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="link" class="form form-table"> Link</label>
                <InputText id="link" class="form form-control" @bind-Value="product.Link" />
            </div>

            <div class="mb-3">
                <label for="bought" class="form form-table">Comprado</label>
                <InputCheckbox id="bought" class="form form-checkbox" @bind-Value="product.Bought" />
            </div>

            <button type="submit" class="btn btn-outline-success">Salvar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="Cancel">Cancelar</button>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Product? product;

    protected override async Task OnInitializedAsync()
    {
        product = await ListaServices.GetProductByIdAsync(Id);
    }

    private async Task HandleValidSubmit()
    {
        if (product is not null)
        {
            await ListaServices.EditProductAsync(product);
            NavigationManager.NavigateTo("/");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
